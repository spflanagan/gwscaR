library(gwscaR)
setwd("~/Projects/gwscaR/")
library(gwscaR)
library(devtools)
library(rmarkdown)
source("R/gwscaR.R")
vcf.file<-system.file("extdata", "example.vcf.txt",package = "gwscaR")
vcf<-parse.vcf(vcf.file)
vcf<-parse.vcf("inst/extdata/example.vcf.txt")
vcf$SNP<-paste(vcf$`#CHROM`,vcf$POS,sep=".")
head(vcf$SNP)
locus.info<-c("#CHROM","POS","ID","REF","ALT","QUAL","FILTER","INFO","FORMAT","SNP")
grp1<-grep("FEM",colnames(vcf),value=T)
grp2<-c(grep("PRM",colnames(vcf),value=T),grep("NPM",colnames(vcf),value=T))
sel<-do.call(rbind,apply(vcf,1,fst.one.vcf,group1=c(locus.info,grp1),group2=c(locus.info,grp2),
cov.thresh=0.5,maf=0.05))
sel<-sel[!is.na(sel$Fst),] #Remove the ones that weren't polymorphic
head(sel)
sel$Chi<-2*((sel$Num1+sel$Num2)/2)*sel$Fst
sel$Chi.p<-1-pchisq(sel$Chi,1)
sel$Chi.p.adj<-p.adjust(sel$Chi.p,method="BH")
?fst.plot
sel.plot<-fst.plot.rect(sel, fst.name="Fst",axis.size=0.6,
xlabels=lgs,xlab.indices = seq(1,22),
chrom.name="Chrom",bp.name="Pos")
lgs<-seq(1,22)
par(mar=c(2,2,2,0),oma=c(1,1,1,1))
sel.plot<-fst.plot(sel, fst.name="Fst",axis.size=0.6,
xlabels=lgs,xlab.indices = seq(1,22),
chrom.name="Chrom",bp.name="Pos")
sel.plot<-fst.plot.rect(sel, fst.name="Fst",axis.size=0.6,
xlabels=lgs,xlab.indices = seq(1,22),
chrom.name="Chrom",bp.name="Pos")
sel.plot<-fst.plot(sel, fst.name="Fst",axis.size=0.6,
xlabels=lgs,xlab.indices = seq(1,22),
chrom.name="Chrom",bp.name="Pos")
head(sel)
sel$Chrom <-as.numeric(as.character(sel$Chrom)) #the lgs and chrom have to be the same class
sel.plot<-fst.plot(sel, fst.name="Fst",axis.size = 0.6,
chrom.name="Chrom",bp.name="Pos",xlabels=TRUE,
scaffs.to.plot=lgs)
bounds<-data.frame(levels(as.factor(vcf$`#CHROM`)),tapply(as.numeric(as.character(vcf$POS)),vcf$`#CHROM`,max))
par(mar=c(2,2,2,0),oma=c(1,1,1,1))
sel.plot<-fst.plot(sel, fst.name="Fst",axis.size=0.6,
chrom.name="Chrom",bp.name="Pos",xlabels=lgs,
scaffold.widths = bounds)
sel.plot<-fst.plot(sel, fst.name="Fst",axis.size=0.6,
chrom.name="Chrom",bp.name="Pos",xlabels=lgs,
scaffold.widths = bounds)
class(lgs)
class(lgs)=="logical"
lgs==TRUE
lgs
fst.plot<-function(fst.dat,scaffold.widths=NULL,scaffs.to.plot=NULL,
fst.name="Fst", chrom.name="Chrom", bp.name="BP",
y.lim=NULL,xlabels=NULL,xlab.indices=NULL,
axis.size=0.5,pt.cols=c("darkgrey","lightgrey"),pt.cex=0.5,...){
#make sure fsts are numeric
fst.dat[,fst.name]<-as.numeric(as.character(fst.dat[,fst.name]))
#if scaffold widths aren't provided, we add them ourselves
if(is.null(scaffold.widths)){
scaffold.widths<-data.frame(Chrom=levels(as.factor(fst.dat[,chrom.name])),
Max=tapply(as.numeric(as.character(fst.dat[,bp.name])),
fst.dat[,chrom.name],max))
}
colnames(scaffold.widths)<-c("Chrom","Max")
#if no specific scaffolds are provided, we plot them all
if(is.null(scaffs.to.plot)){
scaffs.to.plot<-scaffold.widths[,1]#unique(fst.dat[,chrom.name])
}
#set up new dataframe
new.dat<-data.frame(stringsAsFactors = F)
last.max<-0
for(i in 1:length(scaffs.to.plot)){
#pull out the data for this scaffold
chrom.dat<-fst.dat[fst.dat[,chrom.name] %in% scaffs.to.plot[i],]
if(nrow(chrom.dat)>0){
chrom.dat$plot.pos<-as.numeric(as.character(chrom.dat[,bp.name]))+last.max
new.dat<-rbind(new.dat,chrom.dat)
#last.max<-max(chrom.dat$plot.pos)+
#               as.numeric(scaffold.widths[scaffold.widths[,1] %in% scaffs.to.plot[i],2])
}
last.max<-last.max+
as.numeric(scaffold.widths[scaffold.widths[,1] %in% scaffs.to.plot[i],2])
}
#make sure everything is the correct class
new.dat$plot.pos<-as.numeric(as.character(new.dat$plot.pos))
new.dat[,chrom.name]<-as.factor(as.character(new.dat[,chrom.name]))
scaffs.to.plot<-as.factor(as.character(scaffs.to.plot))
#determine the axis limits
x.max<-max(new.dat$plot.pos,na.rm=T)
x.min<-min(new.dat$plot.pos,na.rm=T)
if(is.null(y.lim)){
y.max<-max(fst.dat[,fst.name])+0.1*max(fst.dat[,fst.name])
y.min<-min(fst.dat[,fst.name])-0.1*min(fst.dat[,fst.name])
if(min(fst.dat[,fst.name]) < 0) {
y.min<-min(fst.dat[,fst.name]) - 0.1*min(fst.dat[,fst.name])
} else {
y.min<-0
}
y.lim<-c(y.min,y.max)
}
#plot
colors<-data.frame(lg=as.character(new.dat[,chrom.name]),col=rep(pt.cols[1],nrow(new.dat)),
stringsAsFactors = F)
colors[as.numeric(as.factor(colors$lg))%%2==0,"col"]<-pt.cols[2]
plot(new.dat$plot.pos,new.dat[,fst.name],
xlim=c(x.min,x.max),ylim=y.lim,
pch=19, cex=pt.cex, col=colors$col,...,
bty="n",axes=F, xlab="", ylab="")
#optionally add the y-axis
if(axis.size>0){
axis(2, at = seq(round(y.lim[1],2),round(y.lim[2],2),
round((y.lim[2]-y.lim[1])/2, digits=2)),
ylim =y.lim, pos=0,
labels=seq(round(y.lim[1],2),round(y.lim[2],2),
round((y.lim[2]-y.lim[1])/2, digits=2)),
las=1,tck = -0.01, xlab="", ylab="", cex.axis=axis.size)
}
#optionally add the x-axis
if(!is.null(xlabels)){
#is this a boolean or a list?
if(class(xlabels)=="logical"){
xlabels<-as.character(scaffs.to.plot)
}
#if there are not indices, they should just be the ones that match scaffolds
if(is.null(xlab.indices)){
xlab.indices<-which(scaffs.to.plot %in% xlabels)
}
for(i in 1:length(xlabels)){
text(x=median(new.dat[new.dat[,chrom.name] %in% scaffs.to.plot[xlab.indices[i]],"plot.pos"]),
y=(y.lim[1]-((y.lim[2]-y.lim[1])/20)),
labels=xlabels[i],adj=1,xpd=TRUE,cex=as.numeric(axis.size))
}
}
return(new.dat)
}
sel.plot<-fst.plot(sel, fst.name="Fst",axis.size = 0.6,
chrom.name="Chrom",bp.name="Pos",xlabels=T,
scaffold.widths = bounds, scaffs.to.plot=lgs)
sel.plot<-fst.plot(sel, fst.name="Fst",axis.size = 0.6,
chrom.name="Chrom",bp.name="Pos",xlabels=T,
scaffold.widths = bounds, scaffs.to.plot=lgs)
sel.plot<-fst.plot(sel, fst.name="Fst",axis.size = 0.6,
chrom.name="Chrom",bp.name="Pos",xlabels=TRUE,
scaffs.to.plot=lgs)
sel.plot<-fst.plot(sel, fst.name="Fst",axis.size=0.6,
xlabels=lgs,xlab.indices = seq(1,22),
chrom.name="Chrom",bp.name="Pos")
lgs<-seq(1,22)
sel.plot<-fst.plot(sel, fst.name="Fst",axis.size = 0.6,
chrom.name="Chrom",bp.name="Pos",xlabels=T,
scaffold.widths = bounds, scaffs.to.plot=lgs)
points(sel.plot$plot.pos[sel.plot$Chi.p.adj<0.05],sel.plot$Fst[sel.plot$Chi.p.adj<0.05],
col="cornflowerblue",pch=19,cex=0.75) #only one point is significant in this example
points(sel.plot$plot.pos[sel.plot$Chi.p.adj<0.05],sel.plot$Fst[sel.plot$Chi.p.adj<0.05],
col="cornflowerblue",pch=19,cex=0.75) #only one point is significant in this example
#create a data.frame with the starts and stops for the chromosomes
bounds<-data.frame(levels(as.factor(vcf$`#CHROM`)),tapply(as.numeric(as.character(vcf$POS)),vcf$`#CHROM`,max))
par(mar=c(2,2,2,0),oma=c(1,1,1,1))
sel.plot<-fst.plot(sel, fst.name="Fst",axis.size=0.6,
chrom.name="Chrom",bp.name="Pos",xlabels=lgs,
scaffold.widths = bounds)
#Or if you just want to plot the linkage groups
lgs<-seq(1,22)
sel.plot<-fst.plot(sel, fst.name="Fst",axis.size = 0.6,
chrom.name="Chrom",bp.name="Pos",xlabels=T,
scaffold.widths = bounds, scaffs.to.plot=lgs)
#And you can highlight the points that have adjusted p-values < 0.05
points(sel.plot$plot.pos[sel.plot$Chi.p.adj<0.05],sel.plot$Fst[sel.plot$Chi.p.adj<0.05],
col="cornflowerblue",pch=19,cex=0.75) #only one point is significant in this example
